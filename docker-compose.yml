services:
    zookeeper:
        image: bitnami/zookeeper:latest
        ports:
            - "2181:2181"
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes
    kafka:
        image: bitnami/kafka:latest
        ports:
            - "9092:9092"
            - "9093:9093" # Port cho controller
        environment:
            - KAFKA_CFG_PROCESS_ROLES=controller,broker
            - KAFKA_CFG_NODE_ID=1
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
            - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
            - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
            - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
            - ALLOW_PLAINTEXT_LISTENER=yes
        depends_on:
            - zookeeper
    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        ports:
            - "8080:8080"
        environment:
            - KAFKA_CLUSTERS_0_NAME=local
            - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
        depends_on:
            - kafka
        restart: always
    movie_db:
        image: postgres:latest
        ports:
            - "5433:5432"
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB_NAME}
        networks:
            - apisix
    movie_service:
        build: ./movie_service
        command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
        ports:
            - 8000:8000
        # environment:
        #     - DATABASE_URI=postgresql://movie_db_username:movie_db_password@movie_db/movie_db_dev
        #     - CAST_SERVICE_HOST_URL=http://cast_service:8000/api/v1/casts/
        depends_on:
            - movie_db
        networks:
            - apisix
    apisix:
        image: apache/apisix:latest
        restart: always
        volumes:
            - ./apisix_log:/usr/local/apisix/logs
            - ./apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro
            - ./apisix_conf/apisix.yaml:/usr/local/apisix/conf/apisix.yaml:ro
        ports:
            - "9180:9180/tcp" # admin port
            - "9080:9080/tcp"
            - "9091:9091/tcp"
            - "9443:9443/tcp"
            - "9094:9092/tcp"
        environment:
            - APISIX_STAND_ALONE=true # Tắt chế độ standalone
            # - APISIX_CONFIG_STORAGE=etcd # Dùng etcd làm storage
            # - APISIX_ETCD_HOST=http://etcd:2379
        # depends_on:
        #     - etcd
        networks:
            - apisix
    # etcd:
    #     image: bitnami/etcd:3.4.15
    #     restart: always
    #     volumes:
    #         - etcd_data:/bitnami/etcd
    #     environment:
    #         ETCD_ENABLE_V2: "true"
    #         ALLOW_NONE_AUTHENTICATION: "yes"
    #         ETCD_ADVERTISE_CLIENT_URLS: "http://0.0.0.0:2379"
    #         ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
    #     ports:
    #         - "2379:2379"
    #     networks:
    #         - apisix
    prometheus:
        image: prom/prometheus:v2.25.0
        restart: always
        volumes:
            - ./prometheus_conf/prometheus.yml:/etc/prometheus/prometheus.yml
        ports:
            - "9090:9090"
        networks:
            - apisix
    grafana:
        image: grafana/grafana:7.3.7
        restart: always
        ports:
            - "3000:3000"
        volumes:
            - "./grafana_conf/provisioning:/etc/grafana/provisioning"
            - "./grafana_conf/dashboards:/var/lib/grafana/dashboards"
            - "./grafana_conf/config/grafana.ini:/etc/grafana/grafana.ini"
        networks:
            - apisix

networks:
    apisix:
        driver: bridge

volumes:
    etcd_data:
        driver: local
